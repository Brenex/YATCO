<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
    <TriggerPackage>
        <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>YATCO</name>
            <script></script>
            <triggerType>0</triggerType>
            <conditonLineDelta>0</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName>YATCOConfig</packageName>
            <mFgColor>#ff0000</mFgColor>
            <mBgColor>#ffff00</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList/>
            <regexCodePropertyList/>
            <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Demonnic</name>
                <script></script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList/>
                <regexCodePropertyList/>
                <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Tabbed Chat</name>
                    <script></script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>0</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList/>
                    <regexCodePropertyList/>
                    <TriggerGroup isActive="no" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                        <name>Chat Processor</name>
                        <script></script>
                        <triggerType>0</triggerType>
                        <conditonLineDelta>0</conditonLineDelta>
                        <mStayOpen>0</mStayOpen>
                        <mCommand></mCommand>
                        <packageName></packageName>
                        <mFgColor>#ff0000</mFgColor>
                        <mBgColor>#ffff00</mBgColor>
                        <mSoundFile></mSoundFile>
                        <colorTriggerFgColor>#000000</colorTriggerFgColor>
                        <colorTriggerBgColor>#000000</colorTriggerBgColor>
                        <regexCodeList/>
                        <regexCodePropertyList/>
                        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                            <name>Chat Parser</name>
                            <script>demonnic:printDebug(
  &quot;Chat Parser&quot;,
  &quot;Entered Chat Parser. Variable demonnic.gmcpchat.last is being passed to function demonnic.chat:append() and contains &quot; ..
  demonnic.gmcpchat.last
)
demonnic.chat:append(demonnic.gmcpchat.last)</script>
                            <triggerType>0</triggerType>
                            <conditonLineDelta>0</conditonLineDelta>
                            <mStayOpen>0</mStayOpen>
                            <mCommand></mCommand>
                            <packageName></packageName>
                            <mFgColor>#ff0000</mFgColor>
                            <mBgColor>#ffff00</mBgColor>
                            <mSoundFile></mSoundFile>
                            <colorTriggerFgColor>#000000</colorTriggerFgColor>
                            <colorTriggerBgColor>#000000</colorTriggerBgColor>
                            <regexCodeList>
                                <string>^\&lt;\&lt;(.+)\&gt;\&gt;.+$</string>
                                <string>^(.*)(growl|whisper|scream|ask|murmur|says|say|say to|says to)(.*)$</string>
                                <string>^(.+)(tell|tells)(.+)$</string>
                            </regexCodeList>
                            <regexCodePropertyList>
                                <integer>1</integer>
                                <integer>1</integer>
                                <integer>1</integer>
                            </regexCodePropertyList>
                        </Trigger>
                        <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                            <name>Disable Processor</name>
                            <script>demonnic.gmcpchat.chat_processed()</script>
                            <triggerType>0</triggerType>
                            <conditonLineDelta>0</conditonLineDelta>
                            <mStayOpen>0</mStayOpen>
                            <mCommand></mCommand>
                            <packageName></packageName>
                            <mFgColor>#ff0000</mFgColor>
                            <mBgColor>#ffff00</mBgColor>
                            <mSoundFile></mSoundFile>
                            <colorTriggerFgColor>#000000</colorTriggerFgColor>
                            <colorTriggerBgColor>#000000</colorTriggerBgColor>
                            <regexCodeList>
                                <string>return isPrompt()</string>
                            </regexCodeList>
                            <regexCodePropertyList>
                                <integer>4</integer>
                            </regexCodePropertyList>
                        </Trigger>
                    </TriggerGroup>
                </TriggerGroup>
            </TriggerGroup>
        </TriggerGroup>
    </TriggerPackage>
    <TimerPackage/>
    <AliasPackage>
        <AliasGroup isActive="yes" isFolder="yes">
            <name>YATCO</name>
            <script></script>
            <command></command>
            <packageName>YATCO</packageName>
            <regex></regex>
            <AliasGroup isActive="yes" isFolder="yes">
                <name>Demonnic</name>
                <script></script>
                <command></command>
                <packageName></packageName>
                <regex></regex>
                <AliasGroup isActive="yes" isFolder="yes">
                    <name>Shared</name>
                    <script></script>
                    <command></command>
                    <packageName></packageName>
                    <regex></regex>
                    <Alias isActive="yes" isFolder="no">
                        <name>Reset chasing</name>
                        <script>demonnic.chaser:reset()</script>
                        <command></command>
                        <packageName></packageName>
                        <regex>^chaseres$</regex>
                    </Alias>
                    <Alias isActive="yes" isFolder="no">
                        <name>Debug</name>
                        <script>if matches[2] then
  demonnic:listCategories()
else
  demonnic:toggleDebug()
end</script>
                        <command></command>
                        <packageName></packageName>
                        <regex>^debug(?: (list))?$</regex>
                    </Alias>
                    <Alias isActive="yes" isFolder="no">
                        <name>debug categories</name>
                        <script>if matches[2] then
  demonnic:watchCategory( matches[2] )
else
  demonnic:listCategories()
end</script>
                        <command></command>
                        <packageName></packageName>
                        <regex>^debugc(?: (.*))?$</regex>
                    </Alias>
                </AliasGroup>
                <AliasGroup isActive="yes" isFolder="yes">
                    <name>Tabbed Chat</name>
                    <script></script>
                    <command></command>
                    <packageName></packageName>
                    <regex></regex>
                    <Alias isActive="yes" isFolder="no">
                        <name>Toggle blinking (temporary change)</name>
                        <script>if demonnic.chat.config.blink then
  demonnic.chat.config.blink = false
  demonnic.chat.tabsToBlink = {}
  demonnic:echo(&quot;Blinking temporarily turned &lt;red&gt;off&lt;grey&gt;. It will reset if you edit your tabbed chat configuration, or close and reopen mudlet. To make it permanent, change demonnic.chat.config.blink to false in \&quot;Demonnic-&gt;Tabbed Chat-&gt;Configuration options\&quot; under scripts\n&quot;)
else
  demonnic.chat.config.blink = true
  demonnic.chat:blink()
  demonnic:echo(&quot;Blinking temporarily turned &lt;red&gt;on&lt;grey&gt;. It will reset if you edit your tabbed chat configuration, or close and reopen mudlet. To make it permanent, change demonnic.chat.config.blink to true in \&quot;Demonnic-&gt;Tabbed Chat-&gt;Configuration options\&quot; under scripts\n&quot;)
end</script>
                        <command></command>
                        <packageName></packageName>
                        <regex>^dblink$</regex>
                    </Alias>
                    <Alias isActive="yes" isFolder="no">
                        <name>fixChat</name>
                        <script>local currentsetting = demonnic.chat.config.location
local newsetting = &quot;&quot;
if currentsetting == &quot;topright&quot; then 
  newsetting = &quot;bottomleft&quot; 
elseif currentsetting == &quot;topleft&quot; then
  newsetting = &quot;bottomright&quot;
elseif currentsetting == &quot;bottomleft&quot; then
  newsetting = &quot;topright&quot;
elseif currentsetting == &quot;bottomright&quot; then
  newsetting = &quot;topleft&quot;
end

demonnic.chat.config.location = newsetting
demonnic.chat:create()
demonnic.chat.config.location = currentsetting
demonnic.chat:create()</script>
                        <command></command>
                        <packageName></packageName>
                        <regex>^fixchat$</regex>
                    </Alias>
                </AliasGroup>
            </AliasGroup>
        </AliasGroup>
    </AliasPackage>
    <ActionPackage/>
    <ScriptPackage>
        <ScriptGroup isActive="yes" isFolder="yes">
            <name>YATCO</name>
            <packageName>YATCO</packageName>
            <script></script>
            <eventHandlerList/>
            <ScriptGroup isActive="yes" isFolder="yes">
                <name>Demonnic</name>
                <packageName></packageName>
                <script></script>
                <eventHandlerList/>
                <ScriptGroup isActive="yes" isFolder="yes">
                    <name>Shared</name>
                    <packageName></packageName>
                    <script>--Bootstrapping variables/etc. Don't touch this unless you really know what you're doing

--I mean it. I'll point. AND laugh. loudly. 
demonnic = demonnic or {}
demonnic.config = demonnic.config or {}
demonnic.balances = demonnic.balances or {}
demonnic.balances.balance = demonnic.balances.balance or 1
demonnic.balances.equilibrium = demonnic.balances.equilibrium or 1
demonnic.debug = demonnic.debug or {}
demonnic.debug.active = demonnic.debug.active or nil
demonnic.debug.categories = demonnic.debug.categories or { }


function demonnic:echo(msg)
 cecho(string.format(&quot;\n&lt;blue&gt;(&lt;green&gt;Demonnic&lt;blue&gt;):&lt;white&gt; %s&quot;, msg))
end</script>
                    <eventHandlerList/>
                    <Script isActive="yes" isFolder="no">
                        <name>Debugging</name>
                        <packageName></packageName>
                        <script>--Adds debugging functionality
demonnic.debug.categories = {&quot;Chat Parser&quot;, &quot;GMCP Simple Chat&quot;,}

function demonnic:Debug(category, debugData)
  if category then
    if table.contains(demonnic.debug.categories, category) then
      if type(debugData) == &quot;table&quot; then
        demonnic:echo(&quot;&lt;red&gt;DEBUG &quot; .. category .. &quot;:&lt;white&gt;&quot;)
        display(debugData)
      elseif type(debugData) == &quot;string&quot; or type(debugData) == &quot;number&quot; then
        demonnic:echo(&quot;&lt;red&gt;DEBUG &quot; .. category .. &quot;:&lt;white&gt; &quot; .. debugData .. &quot;\n&quot;)
      else
        demonnic:echo(&quot;&lt;red&gt;DEBUG &quot; .. category .. &quot;:&lt;white&gt; &quot; .. tostring(debugData) .. &quot;\n&quot;)
      end
    end
  else
    if type(debugData) == &quot;table&quot; then
      demonnic:echo(&quot;&lt;red&gt;DEBUG:&lt;white&gt;&quot;)
      display(debugData)
    elseif type(debugData) == &quot;string&quot; or type(debugData) == &quot;number&quot; then
      demonnic:echo(&quot;&lt;red&gt;DEBUG:&lt;white&gt; &quot; .. debugData)
    else
      demonnic:echo(&quot;&lt;red&gt;DEBUG:&lt;white&gt; &quot; .. tostring(debugData))
    end
  end
end

function demonnic:printDebug(category, debugData)
  if not demonnic.debug.active then
    return
  end
  demonnic:Debug(category, debugData)
end

function demonnic:toggleDebug()
  if demonnic.debug.active then
    demonnic.debug.active = nil
  else
    demonnic.debug.active = true
  end
  demonnic:echo(
    &quot;Debugging is currently &quot; ..
    ((demonnic.debug.active and &quot;&lt;green&gt;ON&lt;white&gt;&quot;) or &quot;&lt;red&gt;OFF&lt;white&gt;&quot;)
  )
end

function demonnic:watchCategory(category)
  if table.contains(demonnic.debug.categories, category) then
    for i, v in ipairs(demonnic.debug.categories) do
      if v == category then
        table.remove(demonnic.debug.categories, i)
      end
    end
    demonnic:echo(&quot;No longer watching the '&lt;red&gt;&quot; .. category .. &quot;&lt;white&gt;' category.&quot;)
  else
    table.insert(demonnic.debug.categories, category)
    demonnic:echo(&quot;Now watching the '&lt;red&gt;&quot; .. category .. &quot;&lt;white&gt;' category.&quot;)
  end
  demonnic:echo(
    &quot;Debugging is currently &quot; ..
    ((demonnic.debug.active and &quot;&lt;green&gt;ON&lt;white&gt;&quot;) or &quot;&lt;red&gt;OFF&lt;white&gt;&quot;)
  )
end

function demonnic:listCategories()
  if #demonnic.debug.categories &gt; 0 then
    demonnic:echo(
      &quot;You are currently watching the following categories:\n&quot; ..
      table.concat(demonnic.debug.categories, &quot;, &quot;)
    )
  else
    demonnic:echo(&quot;You are not watching any debugs.&quot;)
  end
end</script>
                        <eventHandlerList/>
                    </Script>
                    <Script isActive="yes" isFolder="no">
                        <name>Geyser Additions</name>
                        <packageName></packageName>
                        <script>function Geyser.MiniConsole:clear()
   clearWindow(self.name)
end

function Geyser.MiniConsole:append()
  appendBuffer(self.name)
end</script>
                        <eventHandlerList/>
                    </Script>
                </ScriptGroup>
                <ScriptGroup isActive="yes" isFolder="yes">
                    <name>Tabbed Chat</name>
                    <packageName></packageName>
                    <script>--Do not remove the following lines. Or change them.
demonnic = demonnic or {}
demonnic.chat = demonnic.chat or {}
demonnic.chat.tabsToBlink = demonnic.chat.tabsToBlink or {}
demonnic.chat.tabs = demonnic.chat.tabs or {}
demonnic.chat.windows = demonnic.chat.windows or {}
demonnic.gmcpchat = demonnic.gmcpchat or {}
if not demonnic.chat.config then
  cecho(&quot;&lt;red:white&gt;YOU DO NOT HAVE THE YATCO CONFIG PACKAGE IN PLACE. THINGS WILL NOT WORK AS EXPECTED\n\n&quot;)
  demonnic.chat.error = &quot;NO CONFIG&quot;
end</script>
                    <eventHandlerList/>
                    <Script isActive="yes" isFolder="no">
                        <name>Code</name>
                        <packageName></packageName>
                        <script>--[[
If the label callbacks ever decide to start taking a function which is part of a table, 0then this will change.
Or if it's modified to take actual functions. Anonymouse function clickcallback would be awfully nice.
]]

function demonnicChatSwitch(chat)
  local r = demonnic.chat.config.inactiveColors.r
  local g = demonnic.chat.config.inactiveColors.g
  local b = demonnic.chat.config.inactiveColors.b
  local newr = demonnic.chat.config.activeColors.r
  local newg = demonnic.chat.config.activeColors.g
  local newb = demonnic.chat.config.activeColors.b
  local oldchat = demonnic.chat.currentTab
  if demonnic.chat.currentTab ~= chat then
    demonnic.chat.windows[oldchat]:hide()
    demonnic.chat.tabs[oldchat]:setColor(r,g,b)
    demonnic.chat.tabs[oldchat]:echo(oldchat, demonnic.chat.config.inactiveTabText, &quot;c&quot;)
    if demonnic.chat.config.blink and demonnic.chat.tabsToBlink[chat] then
      demonnic.chat.tabsToBlink[chat] = nil
    end
    if demonnic.chat.config.blink and chat == demonnic.chat.config.Alltab then
      demonnic.chat.tabsToBlink = {}
    end
  end
  demonnic.chat.tabs[chat]:setColor(newr,newg,newb)
  demonnic.chat.tabs[chat]:echo(chat, demonnic.chat.config.activeTabText, &quot;c&quot;)
  demonnic.chat.windows[chat]:show()
  demonnic.chat.currentTab = chat  
end

function demonnic.chat:resetUI()
  demonnic.chat.container = demonnic.chat.useContainer or Geyser.Container:new(demonnic.chat[demonnic.chat.config.location]())
  demonnic.chat.tabBox = Geyser.HBox:new({
    x=0,
    y=0,
    width = &quot;100%&quot;,
    height = &quot;25px&quot;,
    name = &quot;DemonChatTabs&quot;,
  },demonnic.chat.container)

end

function demonnic.chat:create()
  --reset the UI
  demonnic.chat:resetUI()
  --Set some variables locally to increase readability
  local r = demonnic.chat.config.inactiveColors.r
  local g = demonnic.chat.config.inactiveColors.g
  local b = demonnic.chat.config.inactiveColors.b
  local winr = demonnic.chat.config.windowColors.r
  local wing = demonnic.chat.config.windowColors.g
  local winb = demonnic.chat.config.windowColors.b

  --iterate the table of channels and create some windows and tabs
  for i,tab in ipairs(demonnic.chat.config.channels) do
    demonnic.chat.tabs[tab] = Geyser.Label:new({
      name=string.format(&quot;tab%s&quot;, tab),
    }, demonnic.chat.tabBox)
    demonnic.chat.tabs[tab]:echo(tab, demonnic.chat.config.inactiveTabText, &quot;c&quot;)
    demonnic.chat.tabs[tab]:setColor(r,g,b)
    demonnic.chat.tabs[tab]:setClickCallback(&quot;demonnicChatSwitch&quot;, tab)
    demonnic.chat.windows[tab] = Geyser.MiniConsole:new({
--      fontSize = demonnic.chat.config.fontSize,
      x = 0,
      y = 25,
      height = &quot;100%&quot;,
      width = &quot;100%&quot;,
      name = string.format(&quot;win%s&quot;, tab),
    }, demonnic.chat.container)
    demonnic.chat.windows[tab]:setFontSize(demonnic.chat.config.fontSize)
    demonnic.chat.windows[tab]:setColor(winr,wing,winb)
    demonnic.chat.windows[tab]:setWrap(demonnic.chat.config.width)
    demonnic.chat.windows[tab]:hide()
  end
  if demonnic.chat.config.Maptab and demonnic.chat.config.Maptab ~= &quot;&quot; then
    demonnic.chat.mapWindow = Geyser.Mapper:new({
      x = 0,
      y = 0,
      height = &quot;100%&quot;,
      width = &quot;100%&quot;,
    }, demonnic.chat.windows[demonnic.chat.config.Maptab])
    demonnic.chat.windows[demonnic.chat.config.Maptab]:hide()
  end
  local showme = demonnic.chat.config.Alltab or demonnic.chat.config.channels[1]
  demonnicChatSwitch(showme)
  --start the blink timers, if enabled
  if demonnic.chat.config.blink and not demonnic.chat.blinkTimerOn then
    demonnic.chat:blink()
  end
end

function demonnic.chat:append(chat)
  local r = demonnic.chat.config.windowColors.r
  local g = demonnic.chat.config.windowColors.g
  local b = demonnic.chat.config.windowColors.b
  selectCurrentLine()
  local ofr,ofg,ofb = getFgColor()
  local obr,obg,obb = getBgColor()
  if demonnic.chat.config.preserveBackground then
    setBgColor(r,g,b)
  end
  copy()
  if demonnic.chat.config.timestamp then
    local timestamp = getTime(true, demonnic.chat.config.timestamp)
    local tsfg = {}
    local tsbg = {}
    local colorLeader = &quot;&quot;
    if demonnic.chat.config.timestampCustomColor then
      if type(demonnic.chat.config.timestampFG) == &quot;string&quot; then
        tsfg = color_table[demonnic.chat.config.timestampFG]
      else
        tsfg = demonnic.chat.config.timestampFG
      end
      if type(demonnic.chat.config.timestampBG) == &quot;string&quot; then
        tsbg = color_table[demonnic.chat.config.timestampBG]
      else
        tsbg = demonnic.chat.config.timestampBG
      end
      colorLeader = string.format(&quot;&lt;%s,%s,%s:%s,%s,%s&gt;&quot;,tsfg[1],tsfg[2],tsfg[3],tsbg[1],tsbg[2],tsbg[3])
    else
      colorLeader = string.format(&quot;&lt;%s,%s,%s:%s,%s,%s&gt;&quot;,ofr,ofg,ofb,obr,obg,obb)
    end
    local fullstamp = string.format(&quot;%s%s&quot;,colorLeader,timestamp)
      demonnic.chat.windows[chat]:decho(fullstamp)
      demonnic.chat.windows[chat]:echo(&quot; &quot;)
      if demonnic.chat.config.Alltab then 
        demonnic.chat.windows[demonnic.chat.config.Alltab]:decho(fullstamp)
        demonnic.chat.windows[demonnic.chat.config.Alltab]:echo(&quot; &quot;)
      end
  end
  demonnic.chat.windows[chat]:append()
  if demonnic.chat.config.gag then 
    deleteLine() 
    tempLineTrigger(1,1, [[if isPrompt() then deleteLine() end]])
  end
  if demonnic.chat.config.Alltab then appendBuffer(string.format(&quot;win%s&quot;, demonnic.chat.config.Alltab)) end
  if demonnic.chat.config.blink and chat ~= demonnic.chat.currentTab then 
    if (demonnic.chat.config.Alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end



function demonnic.chat:blink()
  if demonnic.chat.blinkID then killTimer(demonnic.chat.blinkID) end
  if not demonnic.chat.config.blink then 
    demonnic.chat.blinkTimerOn = false
    return 
  end
  if not demonnic.chat.container.hidden then
    for tab,_ in pairs(demonnic.chat.tabsToBlink) do
      demonnic.chat.tabs[tab]:flash()
    end
  end
  demonnic.chat.blinkID = tempTimer(demonnic.chat.config.blinkTime, function () demonnic.chat:blink() end)
end

function demonnic.chat:topright()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=string.format(&quot;-%sc&quot;,demonnic.chat.config.width + 2),
    y=0,
    width=&quot;-15px&quot;,
    height=string.format(&quot;%ic&quot;, demonnic.chat.config.lines + 2),
  }
end

function demonnic.chat:topleft()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=0,
    y=0,
    width=string.format(&quot;%sc&quot;,demonnic.chat.config.width),
    height=string.format(&quot;%ic&quot;, demonnic.chat.config.lines + 2),
  }
end

function demonnic.chat:bottomright()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=string.format(&quot;-%sc&quot;,demonnic.chat.config.width + 2),
    y=string.format(&quot;-%sc&quot;,demonnic.chat.config.lines + 2),
    width=&quot;-15px&quot;,
    height=string.format(&quot;%ic&quot;, demonnic.chat.config.lines + 2),
  }
end

function demonnic.chat:bottomleft()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=0,
    y=string.format(&quot;-%sc&quot;,demonnic.chat.config.lines + 2),
    width=string.format(&quot;%sc&quot;,demonnic.chat.config.width),
    height=string.format(&quot;%ic&quot;, demonnic.chat.config.lines + 2),
  }
end</script>
                        <eventHandlerList/>
                    </Script>
                    <Script isActive="yes" isFolder="no">
                        <name>Echo Functions</name>
                        <packageName></packageName>
                        <script>function demonnic.chat:cecho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  cecho(string.format(&quot;win%s&quot;, chat), message)
  if alltab and chat ~= alltab then
    cecho(string.format(&quot;win%s&quot;, alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:decho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  decho(string.format(&quot;win%s&quot;, chat), message)
  if alltab and chat ~= alltab then
    decho(string.format(&quot;win%s&quot;, alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:hecho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  hecho(string.format(&quot;win%s&quot;, chat), message)
  if alltab and chat ~= alltab then
    hecho(string.format(&quot;win%s&quot;, alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:echo(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  echo(string.format(&quot;win%s&quot;, chat), message)
  if alltab and chat ~= alltab then
    echo(string.format(&quot;win%s&quot;, alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end</script>
                        <eventHandlerList/>
                    </Script>
                    <Script isActive="yes" isFolder="no">
                        <name>GMCP Simple Chat</name>
                        <packageName></packageName>
                        <script>function demonnic.gmcpchat.chat_capture()
  local ch = gmcp.Comm.Channel.Start
  demonnic:printDebug(&quot;GMCP Simple Chat&quot;, &quot;Short-hand channel captured from GMCP is: &quot; .. ch)
  demonnic.gmcpchat.last = &quot;Misc&quot;
  demonnic:printDebug(&quot;GMCP Simple Chat&quot;, &quot;Iterating through demonnic.chat.config.gmcpchannelmap.&quot;)
  for c, t in pairs(demonnic.chat.config.gmcpchannelmap) do
    if ch:find(c) then
      demonnic:printDebug(&quot;GMCP Simple Chat&quot;, &quot;Found match.&quot;)
      demonnic:printDebug(&quot;GMCP Simple Chat&quot;, t .. &quot; is the t&quot;)
      demonnic:printDebug(&quot;GMCP Simple Chat&quot;, &quot;Iterating through demonnic.chat.config.channels.&quot;)
      for _, v in ipairs(demonnic.chat.config.channels) do
        if t:find(v) then
          demonnic:printDebug(&quot;GMCP Simple Chat&quot;, &quot;Found match.&quot;)
          demonnic:printDebug(&quot;GMCP Simple Chat&quot;, t .. &quot; is the t&quot;)
					demonnic.gmcpchat.last = t
          break
        end
      end
    end
  end
  if demonnic.gmcpchat.last == demonnic.chat.config.Alltab then
    demonnic:printDebug(&quot;GMCP Simple Chat&quot;, &quot;Did not find match.&quot;)
  end
  enableTrigger(&quot;Chat Processor&quot;)
end

function demonnic.gmcpchat.chat_processed()
  disableTrigger(&quot;Chat Processor&quot;)
end

registerAnonymousEventHandler(&quot;gmcp.Comm.Channel.Start&quot;, &quot;demonnic.gmcpchat.chat_capture&quot;)</script>
                        <eventHandlerList/>
                    </Script>
                    <Script isActive="yes" isFolder="no">
                        <name>Initialization Scripts</name>
                        <packageName></packageName>
                        <script>function demonnicOnInstall(_, package)
  if package:find(&quot;YATCO&quot;) then
    demonnicOnStart()
  end
end

registerAnonymousEventHandler(&quot;sysInstall&quot;, &quot;demonnicOnInstall&quot;)

function demonnicOnStart()
  if demonnic.chat.use then
    demonnic.chat:create()
  end
end

registerAnonymousEventHandler(&quot;sysLoadEvent&quot;, &quot;demonnicOnStart&quot;)
-- function to enable GMCP Communications messages

function demonnic.gmcpchat.enableCommChannel()
  sendGMCP([[Core.Supports.Add [&quot;Comm.Channel 1&quot;] ]])
  demonnic.gmcpchat.enabled = true
  if demonnic.gmcpchat.startTrig then
    killTrigger(demonnic.gmcpchat.startTrig)
  end
end

-- function to disable GMCP Communications messages

function demonnic.gmcpchat.disableCommChannel()
  if not demonnic.gmcpchat.enabled then
    return
  end
  sendGMCP([[Core.Supports.Remove [&quot;Comm.Channel&quot;] ]])
  demonnic.gmcpchat.enabled = false
end

function demonnic.gmcpchat.enabletrigger()
  demonnic.gmcpchat.startTrig =
    tempRegexTrigger(
      &quot;^Your last login was from domain\: .+\.$&quot;, [[demonnic.gmcpchat.enableCommChannel()]]
    )
end

registerAnonymousEventHandler(&quot;sysConnectionEvent&quot;, &quot;demonnic.gmcpchat.enabletrigger&quot;)</script>
                        <eventHandlerList/>
                    </Script>
                </ScriptGroup>
            </ScriptGroup>
        </ScriptGroup>
    </ScriptPackage>
    <KeyPackage/>
</MudletPackage>
